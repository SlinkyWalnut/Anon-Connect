{"ast":null,"code":"/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseBuffer = require('../types/buffer');\nconst SchemaType = require('../schemaType');\nconst CastError = SchemaType.CastError;\nconst utils = require('../utils');\nconst handleBitwiseOperator = require('./operators/bitwise');\nconst UUID_FORMAT = /[0-9a-f]{8}-[0-9a-f]{4}-[0-9][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/i;\nconst Binary = MongooseBuffer.Binary;\n\n/**\n * Helper function to convert the input hex-string to a buffer\n * @param {String} hex The hex string to convert\n * @returns {Buffer} The hex as buffer\n * @api private\n */\n\nfunction hex2buffer(hex) {\n  // use buffer built-in function to convert from hex-string to buffer\n  const buff = hex != null && Buffer.from(hex, 'hex');\n  return buff;\n}\n\n/**\n * Convert a String to Binary\n * @param {String} uuidStr The value to process\n * @returns {MongooseBuffer} The binary to store\n * @api private\n */\n\nfunction stringToBinary(uuidStr) {\n  // Protect against undefined & throwing err\n  if (typeof uuidStr !== 'string') uuidStr = '';\n  const hex = uuidStr.replace(/[{}-]/g, ''); // remove extra characters\n  const bytes = hex2buffer(hex);\n  const buff = new MongooseBuffer(bytes);\n  buff._subtype = 4;\n  return buff;\n}\n\n/**\n * Convert binary to a uuid string\n * @param {Buffer|Binary|String} uuidBin The value to process\n * @returns {String} The completed uuid-string\n * @api private\n */\nfunction binaryToString(uuidBin) {\n  // i(hasezoey) dont quite know why, but \"uuidBin\" may sometimes also be the already processed string\n  let hex;\n  if (typeof uuidBin !== 'string' && uuidBin != null) {\n    hex = uuidBin.toString('hex');\n    const uuidStr = hex.substring(0, 8) + '-' + hex.substring(8, 8 + 4) + '-' + hex.substring(12, 12 + 4) + '-' + hex.substring(16, 16 + 4) + '-' + hex.substring(20, 20 + 12);\n    return uuidStr;\n  }\n  return uuidBin;\n}\n\n/**\n * UUIDv1 SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaUUID(key, options) {\n  SchemaType.call(this, key, options, 'UUID');\n  this.getters.push(function (value) {\n    // For populated\n    if (value != null && value.$__ != null) {\n      return value;\n    }\n    if (Buffer.isBuffer(value)) {\n      return binaryToString(value);\n    } else if (value instanceof Binary) {\n      return binaryToString(value.buffer);\n    } else if (utils.isPOJO(value) && value.type === 'Buffer' && Array.isArray(value.data)) {\n      // Cloned buffers look like `{ type: 'Buffer', data: [5, 224, ...] }`\n      return binaryToString(Buffer.from(value.data));\n    }\n    return value;\n  });\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaUUID.schemaName = 'UUID';\nSchemaUUID.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaUUID.prototype = Object.create(SchemaType.prototype);\nSchemaUUID.prototype.constructor = SchemaUUID;\n\n/*!\n * ignore\n */\n\nSchemaUUID._cast = function (value) {\n  if (value == null) {\n    return value;\n  }\n  function newBuffer(initbuff) {\n    const buff = new MongooseBuffer(initbuff);\n    buff._subtype = 4;\n    return buff;\n  }\n  if (typeof value === 'string') {\n    if (UUID_FORMAT.test(value)) {\n      return stringToBinary(value);\n    } else {\n      throw new CastError(SchemaUUID.schemaName, value, this.path);\n    }\n  }\n  if (Buffer.isBuffer(value)) {\n    return newBuffer(value);\n  }\n  if (value instanceof Binary) {\n    return newBuffer(value.value(true));\n  }\n\n  // Re: gh-647 and gh-3030, we're ok with casting using `toString()`\n  // **unless** its the default Object.toString, because \"[object Object]\"\n  // doesn't really qualify as useful data\n  if (value.toString && value.toString !== Object.prototype.toString) {\n    if (UUID_FORMAT.test(value.toString())) {\n      return stringToBinary(value.toString());\n    }\n  }\n  throw new CastError(SchemaUUID.schemaName, value, this.path);\n};\n\n/**\n * Attaches a getter for all UUID instances.\n *\n * #### Example:\n *\n *     // Note that `v` is a string by default\n *     mongoose.Schema.UUID.get(v => v.toUpperCase());\n *\n *     const Model = mongoose.model('Test', new Schema({ test: 'UUID' }));\n *     new Model({ test: uuid.v4() }).test; // UUID with all uppercase\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaUUID.get = SchemaType.get;\n\n/**\n * Sets a default option for all UUID instances.\n *\n * #### Example:\n *\n *     // Make all UUIDs have `required` of true by default.\n *     mongoose.Schema.UUID.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: mongoose.UUID }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaUUID.set = SchemaType.set;\nSchemaUUID.setters = [];\n\n/**\n * Get/set the function used to cast arbitrary values to UUIDs.\n *\n * #### Example:\n *\n *     // Make Mongoose refuse to cast UUIDs with 0 length\n *     const original = mongoose.Schema.Types.UUID.cast();\n *     mongoose.UUID.cast(v => {\n *       assert.ok(typeof v === \"string\" && v.length > 0);\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.UUID.cast(false);\n *\n * @param {Function} [caster]\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaUUID.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaUUID._checkRequired = v => v != null;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaUUID.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaUUID.prototype.checkRequired = function checkRequired(value) {\n  if (Buffer.isBuffer(value)) {\n    value = binaryToString(value);\n  }\n  return value != null && UUID_FORMAT.test(value);\n};\n\n/**\n * Casts to UUID\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nSchemaUUID.prototype.cast = function (value, doc, init) {\n  if (utils.isNonBuiltinObject(value) && SchemaType._isRef(this, value, doc, init)) {\n    return this._castRef(value, doc, init);\n  }\n  let castFn;\n  if (typeof this._castFunction === 'function') {\n    castFn = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castFn = this.constructor.cast();\n  } else {\n    castFn = SchemaUUID.cast();\n  }\n  try {\n    return castFn(value);\n  } catch (error) {\n    throw new CastError(SchemaUUID.schemaName, value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\n/*!\n * ignore\n */\n\nfunction handleArray(val) {\n  return val.map(m => {\n    return this.cast(m);\n  });\n}\nSchemaUUID.prototype.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $bitsAllClear: handleBitwiseOperator,\n  $bitsAnyClear: handleBitwiseOperator,\n  $bitsAllSet: handleBitwiseOperator,\n  $bitsAnySet: handleBitwiseOperator,\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $in: handleArray,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $ne: handleSingle,\n  $nin: handleArray\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaUUID.prototype.castForQuery = function ($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) throw new Error('Can\\'t use ' + $conditional + ' with UUID.');\n    return handler.call(this, val, context);\n  }\n  try {\n    return this.applySetters(val, context);\n  } catch (err) {\n    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n      err.path = this.$fullPath;\n    }\n    throw err;\n  }\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaUUID;","map":{"version":3,"names":["MongooseBuffer","require","SchemaType","CastError","utils","handleBitwiseOperator","UUID_FORMAT","Binary","hex2buffer","hex","buff","Buffer","from","stringToBinary","uuidStr","replace","bytes","_subtype","binaryToString","uuidBin","toString","substring","SchemaUUID","key","options","call","getters","push","value","$__","isBuffer","buffer","isPOJO","type","Array","isArray","data","schemaName","defaultOptions","prototype","Object","create","constructor","_cast","newBuffer","initbuff","test","path","get","set","setters","cast","caster","arguments","length","_defaultCaster","_checkRequired","v","checkRequired","doc","init","isNonBuiltinObject","_isRef","_castRef","castFn","_castFunction","error","handleSingle","val","handleArray","map","m","$conditionalHandlers","$bitsAllClear","$bitsAnyClear","$bitsAllSet","$bitsAnySet","$all","$gt","$gte","$in","$lt","$lte","$ne","$nin","castForQuery","$conditional","context","handler","Error","applySetters","err","$fullPath","module","exports"],"sources":["C:/Users/wliu6/OneDrive/Desktop/Web Development/we-detox/Anon-Connect/anon-connect/node_modules/mongoose/lib/schema/uuid.js"],"sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseBuffer = require('../types/buffer');\nconst SchemaType = require('../schemaType');\nconst CastError = SchemaType.CastError;\nconst utils = require('../utils');\nconst handleBitwiseOperator = require('./operators/bitwise');\n\nconst UUID_FORMAT = /[0-9a-f]{8}-[0-9a-f]{4}-[0-9][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/i;\nconst Binary = MongooseBuffer.Binary;\n\n/**\n * Helper function to convert the input hex-string to a buffer\n * @param {String} hex The hex string to convert\n * @returns {Buffer} The hex as buffer\n * @api private\n */\n\nfunction hex2buffer(hex) {\n  // use buffer built-in function to convert from hex-string to buffer\n  const buff = hex != null && Buffer.from(hex, 'hex');\n  return buff;\n}\n\n/**\n * Convert a String to Binary\n * @param {String} uuidStr The value to process\n * @returns {MongooseBuffer} The binary to store\n * @api private\n */\n\nfunction stringToBinary(uuidStr) {\n  // Protect against undefined & throwing err\n  if (typeof uuidStr !== 'string') uuidStr = '';\n  const hex = uuidStr.replace(/[{}-]/g, ''); // remove extra characters\n  const bytes = hex2buffer(hex);\n  const buff = new MongooseBuffer(bytes);\n  buff._subtype = 4;\n\n  return buff;\n}\n\n/**\n * Convert binary to a uuid string\n * @param {Buffer|Binary|String} uuidBin The value to process\n * @returns {String} The completed uuid-string\n * @api private\n */\nfunction binaryToString(uuidBin) {\n  // i(hasezoey) dont quite know why, but \"uuidBin\" may sometimes also be the already processed string\n  let hex;\n  if (typeof uuidBin !== 'string' && uuidBin != null) {\n    hex = uuidBin.toString('hex');\n    const uuidStr = hex.substring(0, 8) + '-' + hex.substring(8, 8 + 4) + '-' + hex.substring(12, 12 + 4) + '-' + hex.substring(16, 16 + 4) + '-' + hex.substring(20, 20 + 12);\n    return uuidStr;\n  }\n  return uuidBin;\n}\n\n/**\n * UUIDv1 SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaUUID(key, options) {\n  SchemaType.call(this, key, options, 'UUID');\n  this.getters.push(function(value) {\n    // For populated\n    if (value != null && value.$__ != null) {\n      return value;\n    }\n    if (Buffer.isBuffer(value)) {\n      return binaryToString(value);\n    } else if (value instanceof Binary) {\n      return binaryToString(value.buffer);\n    } else if (utils.isPOJO(value) && value.type === 'Buffer' && Array.isArray(value.data)) {\n      // Cloned buffers look like `{ type: 'Buffer', data: [5, 224, ...] }`\n      return binaryToString(Buffer.from(value.data));\n    }\n    return value;\n  });\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaUUID.schemaName = 'UUID';\n\nSchemaUUID.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaUUID.prototype = Object.create(SchemaType.prototype);\nSchemaUUID.prototype.constructor = SchemaUUID;\n\n/*!\n * ignore\n */\n\nSchemaUUID._cast = function(value) {\n  if (value == null) {\n    return value;\n  }\n\n  function newBuffer(initbuff) {\n    const buff = new MongooseBuffer(initbuff);\n    buff._subtype = 4;\n    return buff;\n  }\n\n  if (typeof value === 'string') {\n    if (UUID_FORMAT.test(value)) {\n      return stringToBinary(value);\n    } else {\n      throw new CastError(SchemaUUID.schemaName, value, this.path);\n    }\n  }\n\n  if (Buffer.isBuffer(value)) {\n    return newBuffer(value);\n  }\n\n  if (value instanceof Binary) {\n    return newBuffer(value.value(true));\n  }\n\n  // Re: gh-647 and gh-3030, we're ok with casting using `toString()`\n  // **unless** its the default Object.toString, because \"[object Object]\"\n  // doesn't really qualify as useful data\n  if (value.toString && value.toString !== Object.prototype.toString) {\n    if (UUID_FORMAT.test(value.toString())) {\n      return stringToBinary(value.toString());\n    }\n  }\n\n  throw new CastError(SchemaUUID.schemaName, value, this.path);\n};\n\n/**\n * Attaches a getter for all UUID instances.\n *\n * #### Example:\n *\n *     // Note that `v` is a string by default\n *     mongoose.Schema.UUID.get(v => v.toUpperCase());\n *\n *     const Model = mongoose.model('Test', new Schema({ test: 'UUID' }));\n *     new Model({ test: uuid.v4() }).test; // UUID with all uppercase\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaUUID.get = SchemaType.get;\n\n/**\n * Sets a default option for all UUID instances.\n *\n * #### Example:\n *\n *     // Make all UUIDs have `required` of true by default.\n *     mongoose.Schema.UUID.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: mongoose.UUID }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaUUID.set = SchemaType.set;\n\nSchemaUUID.setters = [];\n\n/**\n * Get/set the function used to cast arbitrary values to UUIDs.\n *\n * #### Example:\n *\n *     // Make Mongoose refuse to cast UUIDs with 0 length\n *     const original = mongoose.Schema.Types.UUID.cast();\n *     mongoose.UUID.cast(v => {\n *       assert.ok(typeof v === \"string\" && v.length > 0);\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.UUID.cast(false);\n *\n * @param {Function} [caster]\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaUUID.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaUUID._checkRequired = v => v != null;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaUUID.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaUUID.prototype.checkRequired = function checkRequired(value) {\n  if (Buffer.isBuffer(value)) {\n    value = binaryToString(value);\n  }\n  return value != null && UUID_FORMAT.test(value);\n};\n\n/**\n * Casts to UUID\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nSchemaUUID.prototype.cast = function(value, doc, init) {\n  if (utils.isNonBuiltinObject(value) &&\n      SchemaType._isRef(this, value, doc, init)) {\n    return this._castRef(value, doc, init);\n  }\n\n  let castFn;\n  if (typeof this._castFunction === 'function') {\n    castFn = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castFn = this.constructor.cast();\n  } else {\n    castFn = SchemaUUID.cast();\n  }\n\n  try {\n    return castFn(value);\n  } catch (error) {\n    throw new CastError(SchemaUUID.schemaName, value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\n/*!\n * ignore\n */\n\nfunction handleArray(val) {\n  return val.map((m) => {\n    return this.cast(m);\n  });\n}\n\nSchemaUUID.prototype.$conditionalHandlers = {\n  ...SchemaType.prototype.$conditionalHandlers,\n  $bitsAllClear: handleBitwiseOperator,\n  $bitsAnyClear: handleBitwiseOperator,\n  $bitsAllSet: handleBitwiseOperator,\n  $bitsAnySet: handleBitwiseOperator,\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $in: handleArray,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $ne: handleSingle,\n  $nin: handleArray\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaUUID.prototype.castForQuery = function($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler)\n      throw new Error('Can\\'t use ' + $conditional + ' with UUID.');\n    return handler.call(this, val, context);\n  }\n\n  try {\n    return this.applySetters(val, context);\n  } catch (err) {\n    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {\n      err.path = this.$fullPath;\n    }\n    throw err;\n  }\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaUUID;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}