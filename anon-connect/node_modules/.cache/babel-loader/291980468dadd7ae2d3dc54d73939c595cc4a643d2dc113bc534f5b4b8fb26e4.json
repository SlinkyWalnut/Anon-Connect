{"ast":null,"code":"'use strict';\n\nconst handleTimestampOption = require('../schema/handleTimestampOption');\nconst mpath = require('mpath');\nmodule.exports = applyTimestamps;\n\n/**\n * Apply a given schema's timestamps to the given POJO\n *\n * @param {Schema} schema\n * @param {Object} obj\n * @param {Object} [options]\n * @param {Boolean} [options.isUpdate=false] if true, treat this as an update: just set updatedAt, skip setting createdAt. If false, set both createdAt and updatedAt\n * @param {Function} [options.currentTime] if set, Mongoose will call this function to get the current time.\n */\n\nfunction applyTimestamps(schema, obj, options) {\n  if (obj == null) {\n    return obj;\n  }\n  applyTimestampsToChildren(schema, obj, options);\n  return applyTimestampsToDoc(schema, obj, options);\n}\n\n/**\n * Apply timestamps to any subdocuments\n *\n * @param {Schema} schema subdocument schema\n * @param {Object} res subdocument\n * @param {Object} [options]\n * @param {Boolean} [options.isUpdate=false] if true, treat this as an update: just set updatedAt, skip setting createdAt. If false, set both createdAt and updatedAt\n * @param {Function} [options.currentTime] if set, Mongoose will call this function to get the current time.\n */\n\nfunction applyTimestampsToChildren(schema, res, options) {\n  for (const childSchema of schema.childSchemas) {\n    const _path = childSchema.model.path;\n    const _schema = childSchema.schema;\n    if (!_path) {\n      continue;\n    }\n    const _obj = mpath.get(_path, res);\n    if (_obj == null || Array.isArray(_obj) && _obj.flat(Infinity).length === 0) {\n      continue;\n    }\n    applyTimestamps(_schema, _obj, options);\n  }\n}\n\n/**\n * Apply timestamps to a given document. Does not apply timestamps to subdocuments: use `applyTimestampsToChildren` instead\n *\n * @param {Schema} schema\n * @param {Object} obj\n * @param {Object} [options]\n * @param {Boolean} [options.isUpdate=false] if true, treat this as an update: just set updatedAt, skip setting createdAt. If false, set both createdAt and updatedAt\n * @param {Function} [options.currentTime] if set, Mongoose will call this function to get the current time.\n */\n\nfunction applyTimestampsToDoc(schema, obj, options) {\n  if (obj == null || typeof obj !== 'object') {\n    return;\n  }\n  if (Array.isArray(obj)) {\n    for (const el of obj) {\n      applyTimestampsToDoc(schema, el, options);\n    }\n    return;\n  }\n  if (schema.discriminators && Object.keys(schema.discriminators).length > 0) {\n    for (const discriminatorKey of Object.keys(schema.discriminators)) {\n      const discriminator = schema.discriminators[discriminatorKey];\n      const key = discriminator.discriminatorMapping.key;\n      const value = discriminator.discriminatorMapping.value;\n      if (obj[key] == value) {\n        schema = discriminator;\n        break;\n      }\n    }\n  }\n  const createdAt = handleTimestampOption(schema.options.timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(schema.options.timestamps, 'updatedAt');\n  const currentTime = options?.currentTime;\n  let ts = null;\n  if (currentTime != null) {\n    ts = currentTime();\n  } else if (schema.base?.now) {\n    ts = schema.base.now();\n  } else {\n    ts = new Date();\n  }\n  if (createdAt && obj[createdAt] == null && !options?.isUpdate) {\n    obj[createdAt] = ts;\n  }\n  if (updatedAt) {\n    obj[updatedAt] = ts;\n  }\n}","map":{"version":3,"names":["handleTimestampOption","require","mpath","module","exports","applyTimestamps","schema","obj","options","applyTimestampsToChildren","applyTimestampsToDoc","res","childSchema","childSchemas","_path","model","path","_schema","_obj","get","Array","isArray","flat","Infinity","length","el","discriminators","Object","keys","discriminatorKey","discriminator","key","discriminatorMapping","value","createdAt","timestamps","updatedAt","currentTime","ts","base","now","Date","isUpdate"],"sources":["C:/Users/wliu6/OneDrive/Desktop/Web Development/we-detox/Anon-Connect/anon-connect/node_modules/mongoose/lib/helpers/document/applyTimestamps.js"],"sourcesContent":["'use strict';\n\nconst handleTimestampOption = require('../schema/handleTimestampOption');\nconst mpath = require('mpath');\n\nmodule.exports = applyTimestamps;\n\n/**\n * Apply a given schema's timestamps to the given POJO\n *\n * @param {Schema} schema\n * @param {Object} obj\n * @param {Object} [options]\n * @param {Boolean} [options.isUpdate=false] if true, treat this as an update: just set updatedAt, skip setting createdAt. If false, set both createdAt and updatedAt\n * @param {Function} [options.currentTime] if set, Mongoose will call this function to get the current time.\n */\n\nfunction applyTimestamps(schema, obj, options) {\n  if (obj == null) {\n    return obj;\n  }\n\n  applyTimestampsToChildren(schema, obj, options);\n  return applyTimestampsToDoc(schema, obj, options);\n}\n\n/**\n * Apply timestamps to any subdocuments\n *\n * @param {Schema} schema subdocument schema\n * @param {Object} res subdocument\n * @param {Object} [options]\n * @param {Boolean} [options.isUpdate=false] if true, treat this as an update: just set updatedAt, skip setting createdAt. If false, set both createdAt and updatedAt\n * @param {Function} [options.currentTime] if set, Mongoose will call this function to get the current time.\n */\n\nfunction applyTimestampsToChildren(schema, res, options) {\n  for (const childSchema of schema.childSchemas) {\n    const _path = childSchema.model.path;\n    const _schema = childSchema.schema;\n    if (!_path) {\n      continue;\n    }\n    const _obj = mpath.get(_path, res);\n    if (_obj == null || (Array.isArray(_obj) && _obj.flat(Infinity).length === 0)) {\n      continue;\n    }\n\n    applyTimestamps(_schema, _obj, options);\n  }\n}\n\n/**\n * Apply timestamps to a given document. Does not apply timestamps to subdocuments: use `applyTimestampsToChildren` instead\n *\n * @param {Schema} schema\n * @param {Object} obj\n * @param {Object} [options]\n * @param {Boolean} [options.isUpdate=false] if true, treat this as an update: just set updatedAt, skip setting createdAt. If false, set both createdAt and updatedAt\n * @param {Function} [options.currentTime] if set, Mongoose will call this function to get the current time.\n */\n\nfunction applyTimestampsToDoc(schema, obj, options) {\n  if (obj == null || typeof obj !== 'object') {\n    return;\n  }\n  if (Array.isArray(obj)) {\n    for (const el of obj) {\n      applyTimestampsToDoc(schema, el, options);\n    }\n    return;\n  }\n\n  if (schema.discriminators && Object.keys(schema.discriminators).length > 0) {\n    for (const discriminatorKey of Object.keys(schema.discriminators)) {\n      const discriminator = schema.discriminators[discriminatorKey];\n      const key = discriminator.discriminatorMapping.key;\n      const value = discriminator.discriminatorMapping.value;\n      if (obj[key] == value) {\n        schema = discriminator;\n        break;\n      }\n    }\n  }\n\n  const createdAt = handleTimestampOption(schema.options.timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(schema.options.timestamps, 'updatedAt');\n  const currentTime = options?.currentTime;\n\n  let ts = null;\n  if (currentTime != null) {\n    ts = currentTime();\n  } else if (schema.base?.now) {\n    ts = schema.base.now();\n  } else {\n    ts = new Date();\n  }\n\n  if (createdAt && obj[createdAt] == null && !options?.isUpdate) {\n    obj[createdAt] = ts;\n  }\n  if (updatedAt) {\n    obj[updatedAt] = ts;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}