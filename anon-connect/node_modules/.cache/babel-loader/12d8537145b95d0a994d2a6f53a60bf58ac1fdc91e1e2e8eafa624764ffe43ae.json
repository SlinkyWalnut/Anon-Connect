{"ast":null,"code":"/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseError = require('../error/mongooseError');\nconst Readable = require('stream').Readable;\nconst eachAsync = require('../helpers/cursor/eachAsync');\nconst immediate = require('../helpers/immediate');\nconst util = require('util');\n\n/**\n * An AggregationCursor is a concurrency primitive for processing aggregation\n * results one document at a time. It is analogous to QueryCursor.\n *\n * An AggregationCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * Creating an AggregationCursor executes the model's pre aggregate hooks,\n * but **not** the model's post aggregate hooks.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Aggregate#cursor()`](https://mongoosejs.com/docs/api/aggregate.html#Aggregate.prototype.cursor()) instead.\n *\n * @param {Aggregate} agg\n * @inherits Readable https://nodejs.org/api/stream.html#class-streamreadable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction AggregationCursor(agg) {\n  // set autoDestroy=true because on node 12 it's by default false\n  // gh-10902 need autoDestroy to destroy correctly and emit 'close' event\n  Readable.call(this, {\n    autoDestroy: true,\n    objectMode: true\n  });\n  this.cursor = null;\n  this.agg = agg;\n  this._transforms = [];\n  const model = agg._model;\n  delete agg.options.cursor.useMongooseAggCursor;\n  this._mongooseOptions = {};\n  _init(model, this, agg);\n}\nutil.inherits(AggregationCursor, Readable);\n\n/*!\n * ignore\n */\n\nfunction _init(model, c, agg) {\n  if (!model.collection.buffer) {\n    model.hooks.execPre('aggregate', agg, function () {\n      if (typeof agg.options?.cursor?.transform === 'function') {\n        c._transforms.push(agg.options.cursor.transform);\n      }\n      c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n      c.emit('cursor', c.cursor);\n    });\n  } else {\n    model.collection.emitter.once('queue', function () {\n      model.hooks.execPre('aggregate', agg, function () {\n        if (typeof agg.options?.cursor?.transform === 'function') {\n          c._transforms.push(agg.options.cursor.transform);\n        }\n        c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n        c.emit('cursor', c.cursor);\n      });\n    });\n  }\n}\n\n/**\n * Necessary to satisfy the Readable API\n * @method _read\n * @memberOf AggregationCursor\n * @instance\n * @api private\n */\n\nAggregationCursor.prototype._read = function () {\n  const _this = this;\n  _next(this, function (error, doc) {\n    if (error) {\n      return _this.emit('error', error);\n    }\n    if (!doc) {\n      _this.push(null);\n      _this.cursor.close(function (error) {\n        if (error) {\n          return _this.emit('error', error);\n        }\n      });\n      return;\n    }\n    _this.push(doc);\n  });\n};\nif (Symbol.asyncIterator != null) {\n  const msg = 'Mongoose does not support using async iterators with an ' + 'existing aggregation cursor. See https://bit.ly/mongoose-async-iterate-aggregation';\n  AggregationCursor.prototype[Symbol.asyncIterator] = function () {\n    throw new MongooseError(msg);\n  };\n}\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * #### Example:\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {AggregationCursor}\n * @memberOf AggregationCursor\n * @api public\n * @method map\n */\n\nObject.defineProperty(AggregationCursor.prototype, 'map', {\n  value: function (fn) {\n    this._transforms.push(fn);\n    return this;\n  },\n  enumerable: true,\n  configurable: true,\n  writable: true\n});\n\n/**\n * Marks this cursor as errored\n * @method _markError\n * @instance\n * @memberOf AggregationCursor\n * @api private\n */\n\nAggregationCursor.prototype._markError = function (error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see AggregationCursor.close https://mongodb.github.io/node-mongodb-native/4.9/classes/AggregationCursor.html#close\n */\n\nAggregationCursor.prototype.close = async function close() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('AggregationCursor.prototype.close() no longer accepts a callback');\n  }\n  try {\n    await this.cursor.close();\n  } catch (error) {\n    this.listeners('error').length > 0 && this.emit('error', error);\n    throw error;\n  }\n  this.emit('close');\n};\n\n/**\n * Marks this cursor as destroyed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @return {this}\n * @api private\n * @method _destroy\n */\n\nAggregationCursor.prototype._destroy = function _destroy(_err, callback) {\n  let waitForCursor = null;\n  if (!this.cursor) {\n    waitForCursor = new Promise(resolve => {\n      this.once('cursor', resolve);\n    });\n  } else {\n    waitForCursor = Promise.resolve();\n  }\n  waitForCursor.then(() => this.cursor.close()).then(() => {\n    this._closed = true;\n    callback();\n  }).catch(error => {\n    callback(error);\n  });\n  return this;\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @return {Promise}\n * @api public\n * @method next\n */\n\nAggregationCursor.prototype.next = async function next() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('AggregationCursor.prototype.next() no longer accepts a callback');\n  }\n  return new Promise((resolve, reject) => {\n    _next(this, (err, res) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Number} [options.batchSize=null] if set, Mongoose will call `fn` with an array of at most `batchSize` documents, instead of a single document\n * @param {Boolean} [options.continueOnError=false] if true, `eachAsync()` iterates through all docs even if `fn` throws an error. If false, `eachAsync()` throws an error immediately if the given function `fn()` throws an error.\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nAggregationCursor.prototype.eachAsync = function (fn, opts) {\n  if (typeof arguments[2] === 'function') {\n    throw new MongooseError('AggregationCursor.prototype.eachAsync() no longer accepts a callback');\n  }\n  const _this = this;\n  if (typeof opts === 'function') {\n    opts = {};\n  }\n  opts = opts || {};\n  return eachAsync(function (cb) {\n    return _next(_this, cb);\n  }, fn, opts);\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js)\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * #### Example:\n *\n *     // Async iterator without explicitly calling `cursor()`. Mongoose still\n *     // creates an AggregationCursor instance internally.\n *     const agg = Model.aggregate([{ $match: { age: { $gte: 25 } } }]);\n *     for await (const doc of agg) {\n *       console.log(doc.name);\n *     }\n *\n *     // You can also use an AggregationCursor instance for async iteration\n *     const cursor = Model.aggregate([{ $match: { age: { $gte: 25 } } }]).cursor();\n *     for await (const doc of cursor) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not set if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method [Symbol.asyncIterator]\n * @memberOf AggregationCursor\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  AggregationCursor.prototype[Symbol.asyncIterator] = function () {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nAggregationCursor.prototype._transformForAsyncIterator = function () {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nAggregationCursor.prototype.transformNull = function (val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? {\n    done: true\n  } : {\n    value: doc,\n    done: false\n  };\n}\n\n/**\n * Adds a [cursor flag](https://mongodb.github.io/node-mongodb-native/4.9/classes/AggregationCursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nAggregationCursor.prototype.addCursorFlag = function (flag, value) {\n  const _this = this;\n  _waitForCursor(this, function () {\n    _this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function () {\n    cb();\n  });\n}\n\n/**\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n * @param {Any} ctx\n * @param {Function} cb\n * @api private\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function (err, doc) {\n      if (err || doc === null && !ctx._mongooseOptions.transformNull) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function (doc, fn) {\n        return fn(doc);\n      }, doc));\n    };\n  }\n  if (ctx._error) {\n    return immediate(function () {\n      callback(ctx._error);\n    });\n  }\n  if (ctx.cursor) {\n    return ctx.cursor.next().then(doc => {\n      if (!doc) {\n        return callback(null, null);\n      }\n      callback(null, doc);\n    }, err => callback(err));\n  } else {\n    ctx.once('cursor', function () {\n      _next(ctx, cb);\n    });\n  }\n}\nmodule.exports = AggregationCursor;","map":{"version":3,"names":["MongooseError","require","Readable","eachAsync","immediate","util","AggregationCursor","agg","call","autoDestroy","objectMode","cursor","_transforms","model","_model","options","useMongooseAggCursor","_mongooseOptions","_init","inherits","c","collection","buffer","hooks","execPre","transform","push","aggregate","_pipeline","emit","emitter","once","prototype","_read","_this","_next","error","doc","close","Symbol","asyncIterator","msg","Object","defineProperty","value","fn","enumerable","configurable","writable","_markError","_error","arguments","listeners","length","_destroy","_err","callback","waitForCursor","Promise","resolve","then","_closed","catch","next","reject","err","res","opts","cb","transformNull","_transformForAsyncIterator","indexOf","map","val","done","addCursorFlag","flag","_waitForCursor","ctx","reduce","module","exports"],"sources":["C:/Users/wliu6/OneDrive/Desktop/Web Development/we-detox/Anon-Connect/anon-connect/node_modules/mongoose/lib/cursor/aggregationCursor.js"],"sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseError = require('../error/mongooseError');\nconst Readable = require('stream').Readable;\nconst eachAsync = require('../helpers/cursor/eachAsync');\nconst immediate = require('../helpers/immediate');\nconst util = require('util');\n\n/**\n * An AggregationCursor is a concurrency primitive for processing aggregation\n * results one document at a time. It is analogous to QueryCursor.\n *\n * An AggregationCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * Creating an AggregationCursor executes the model's pre aggregate hooks,\n * but **not** the model's post aggregate hooks.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Aggregate#cursor()`](https://mongoosejs.com/docs/api/aggregate.html#Aggregate.prototype.cursor()) instead.\n *\n * @param {Aggregate} agg\n * @inherits Readable https://nodejs.org/api/stream.html#class-streamreadable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction AggregationCursor(agg) {\n  // set autoDestroy=true because on node 12 it's by default false\n  // gh-10902 need autoDestroy to destroy correctly and emit 'close' event\n  Readable.call(this, { autoDestroy: true, objectMode: true });\n\n  this.cursor = null;\n  this.agg = agg;\n  this._transforms = [];\n  const model = agg._model;\n  delete agg.options.cursor.useMongooseAggCursor;\n  this._mongooseOptions = {};\n\n  _init(model, this, agg);\n}\n\nutil.inherits(AggregationCursor, Readable);\n\n/*!\n * ignore\n */\n\nfunction _init(model, c, agg) {\n  if (!model.collection.buffer) {\n    model.hooks.execPre('aggregate', agg, function() {\n      if (typeof agg.options?.cursor?.transform === 'function') {\n        c._transforms.push(agg.options.cursor.transform);\n      }\n\n      c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n      c.emit('cursor', c.cursor);\n    });\n  } else {\n    model.collection.emitter.once('queue', function() {\n      model.hooks.execPre('aggregate', agg, function() {\n        if (typeof agg.options?.cursor?.transform === 'function') {\n          c._transforms.push(agg.options.cursor.transform);\n        }\n\n        c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n        c.emit('cursor', c.cursor);\n      });\n    });\n  }\n}\n\n/**\n * Necessary to satisfy the Readable API\n * @method _read\n * @memberOf AggregationCursor\n * @instance\n * @api private\n */\n\nAggregationCursor.prototype._read = function() {\n  const _this = this;\n  _next(this, function(error, doc) {\n    if (error) {\n      return _this.emit('error', error);\n    }\n    if (!doc) {\n      _this.push(null);\n      _this.cursor.close(function(error) {\n        if (error) {\n          return _this.emit('error', error);\n        }\n      });\n      return;\n    }\n    _this.push(doc);\n  });\n};\n\nif (Symbol.asyncIterator != null) {\n  const msg = 'Mongoose does not support using async iterators with an ' +\n    'existing aggregation cursor. See https://bit.ly/mongoose-async-iterate-aggregation';\n\n  AggregationCursor.prototype[Symbol.asyncIterator] = function() {\n    throw new MongooseError(msg);\n  };\n}\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * #### Example:\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {AggregationCursor}\n * @memberOf AggregationCursor\n * @api public\n * @method map\n */\n\nObject.defineProperty(AggregationCursor.prototype, 'map', {\n  value: function(fn) {\n    this._transforms.push(fn);\n    return this;\n  },\n  enumerable: true,\n  configurable: true,\n  writable: true\n});\n\n/**\n * Marks this cursor as errored\n * @method _markError\n * @instance\n * @memberOf AggregationCursor\n * @api private\n */\n\nAggregationCursor.prototype._markError = function(error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see AggregationCursor.close https://mongodb.github.io/node-mongodb-native/4.9/classes/AggregationCursor.html#close\n */\n\nAggregationCursor.prototype.close = async function close() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('AggregationCursor.prototype.close() no longer accepts a callback');\n  }\n  try {\n    await this.cursor.close();\n  } catch (error) {\n    this.listeners('error').length > 0 && this.emit('error', error);\n    throw error;\n  }\n  this.emit('close');\n};\n\n/**\n * Marks this cursor as destroyed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @return {this}\n * @api private\n * @method _destroy\n */\n\nAggregationCursor.prototype._destroy = function _destroy(_err, callback) {\n  let waitForCursor = null;\n  if (!this.cursor) {\n    waitForCursor = new Promise((resolve) => {\n      this.once('cursor', resolve);\n    });\n  } else {\n    waitForCursor = Promise.resolve();\n  }\n\n  waitForCursor\n    .then(() => this.cursor.close())\n    .then(() => {\n      this._closed = true;\n      callback();\n    })\n    .catch(error => {\n      callback(error);\n    });\n  return this;\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @return {Promise}\n * @api public\n * @method next\n */\n\nAggregationCursor.prototype.next = async function next() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('AggregationCursor.prototype.next() no longer accepts a callback');\n  }\n  return new Promise((resolve, reject) => {\n    _next(this, (err, res) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Number} [options.batchSize=null] if set, Mongoose will call `fn` with an array of at most `batchSize` documents, instead of a single document\n * @param {Boolean} [options.continueOnError=false] if true, `eachAsync()` iterates through all docs even if `fn` throws an error. If false, `eachAsync()` throws an error immediately if the given function `fn()` throws an error.\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nAggregationCursor.prototype.eachAsync = function(fn, opts) {\n  if (typeof arguments[2] === 'function') {\n    throw new MongooseError('AggregationCursor.prototype.eachAsync() no longer accepts a callback');\n  }\n  const _this = this;\n  if (typeof opts === 'function') {\n    opts = {};\n  }\n  opts = opts || {};\n\n  return eachAsync(function(cb) { return _next(_this, cb); }, fn, opts);\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js)\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * #### Example:\n *\n *     // Async iterator without explicitly calling `cursor()`. Mongoose still\n *     // creates an AggregationCursor instance internally.\n *     const agg = Model.aggregate([{ $match: { age: { $gte: 25 } } }]);\n *     for await (const doc of agg) {\n *       console.log(doc.name);\n *     }\n *\n *     // You can also use an AggregationCursor instance for async iteration\n *     const cursor = Model.aggregate([{ $match: { age: { $gte: 25 } } }]).cursor();\n *     for await (const doc of cursor) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not set if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method [Symbol.asyncIterator]\n * @memberOf AggregationCursor\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  AggregationCursor.prototype[Symbol.asyncIterator] = function() {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nAggregationCursor.prototype._transformForAsyncIterator = function() {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nAggregationCursor.prototype.transformNull = function(val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? { done: true } : { value: doc, done: false };\n}\n\n/**\n * Adds a [cursor flag](https://mongodb.github.io/node-mongodb-native/4.9/classes/AggregationCursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nAggregationCursor.prototype.addCursorFlag = function(flag, value) {\n  const _this = this;\n  _waitForCursor(this, function() {\n    _this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function() {\n    cb();\n  });\n}\n\n/**\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n * @param {Any} ctx\n * @param {Function} cb\n * @api private\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function(err, doc) {\n      if (err || (doc === null && !ctx._mongooseOptions.transformNull)) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function(doc, fn) {\n        return fn(doc);\n      }, doc));\n    };\n  }\n\n  if (ctx._error) {\n    return immediate(function() {\n      callback(ctx._error);\n    });\n  }\n\n  if (ctx.cursor) {\n    return ctx.cursor.next().then(\n      doc => {\n        if (!doc) {\n          return callback(null, null);\n        }\n\n        callback(null, doc);\n      },\n      err => callback(err)\n    );\n  } else {\n    ctx.once('cursor', function() {\n      _next(ctx, cb);\n    });\n  }\n}\n\nmodule.exports = AggregationCursor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}