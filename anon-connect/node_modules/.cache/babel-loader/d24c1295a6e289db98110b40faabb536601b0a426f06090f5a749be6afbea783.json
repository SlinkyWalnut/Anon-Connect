{"ast":null,"code":"'use strict';\n\n/*!\n * ignore\n */\nmodule.exports = function cleanModifiedSubpaths(doc, path, options) {\n  options = options || {};\n  const skipDocArrays = options.skipDocArrays;\n  let deleted = 0;\n  if (!doc) {\n    return deleted;\n  }\n  for (const modifiedPath of Object.keys(doc.$__.activePaths.getStatePaths('modify'))) {\n    if (skipDocArrays) {\n      const schemaType = doc.$__schema.path(modifiedPath);\n      if (schemaType && schemaType.$isMongooseDocumentArray) {\n        continue;\n      }\n    }\n    if (modifiedPath.startsWith(path + '.')) {\n      doc.$__.activePaths.clearPath(modifiedPath);\n      ++deleted;\n      if (doc.$isSubdocument) {\n        cleanParent(doc, modifiedPath);\n      }\n    }\n  }\n  return deleted;\n};\nfunction cleanParent(doc, path, seen = new Set()) {\n  if (seen.has(doc)) {\n    throw new Error('Infinite subdocument loop: subdoc with _id ' + doc._id + ' is a parent of itself');\n  }\n  const parent = doc.$parent();\n  const newPath = doc.$__pathRelativeToParent(void 0, false) + '.' + path;\n  parent.$__.activePaths.clearPath(newPath);\n  if (parent.$isSubdocument) {\n    cleanParent(parent, newPath, seen);\n  }\n}","map":{"version":3,"names":["module","exports","cleanModifiedSubpaths","doc","path","options","skipDocArrays","deleted","modifiedPath","Object","keys","$__","activePaths","getStatePaths","schemaType","$__schema","$isMongooseDocumentArray","startsWith","clearPath","$isSubdocument","cleanParent","seen","Set","has","Error","_id","parent","$parent","newPath","$__pathRelativeToParent"],"sources":["C:/Users/wliu6/OneDrive/Desktop/Web Development/we-detox/Anon-Connect/anon-connect/node_modules/mongoose/lib/helpers/document/cleanModifiedSubpaths.js"],"sourcesContent":["'use strict';\n\n/*!\n * ignore\n */\n\nmodule.exports = function cleanModifiedSubpaths(doc, path, options) {\n  options = options || {};\n  const skipDocArrays = options.skipDocArrays;\n\n  let deleted = 0;\n  if (!doc) {\n    return deleted;\n  }\n\n  for (const modifiedPath of Object.keys(doc.$__.activePaths.getStatePaths('modify'))) {\n    if (skipDocArrays) {\n      const schemaType = doc.$__schema.path(modifiedPath);\n      if (schemaType && schemaType.$isMongooseDocumentArray) {\n        continue;\n      }\n    }\n    if (modifiedPath.startsWith(path + '.')) {\n      doc.$__.activePaths.clearPath(modifiedPath);\n      ++deleted;\n\n      if (doc.$isSubdocument) {\n        cleanParent(doc, modifiedPath);\n      }\n    }\n  }\n  return deleted;\n};\n\nfunction cleanParent(doc, path, seen = new Set()) {\n  if (seen.has(doc)) {\n    throw new Error('Infinite subdocument loop: subdoc with _id ' + doc._id + ' is a parent of itself');\n  }\n  const parent = doc.$parent();\n  const newPath = doc.$__pathRelativeToParent(void 0, false) + '.' + path;\n  parent.$__.activePaths.clearPath(newPath);\n  if (parent.$isSubdocument) {\n    cleanParent(parent, newPath, seen);\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG,SAASC,qBAAqBA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,EAAE;EAClEA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,MAAMC,aAAa,GAAGD,OAAO,CAACC,aAAa;EAE3C,IAAIC,OAAO,GAAG,CAAC;EACf,IAAI,CAACJ,GAAG,EAAE;IACR,OAAOI,OAAO;EAChB;EAEA,KAAK,MAAMC,YAAY,IAAIC,MAAM,CAACC,IAAI,CAACP,GAAG,CAACQ,GAAG,CAACC,WAAW,CAACC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAE;IACnF,IAAIP,aAAa,EAAE;MACjB,MAAMQ,UAAU,GAAGX,GAAG,CAACY,SAAS,CAACX,IAAI,CAACI,YAAY,CAAC;MACnD,IAAIM,UAAU,IAAIA,UAAU,CAACE,wBAAwB,EAAE;QACrD;MACF;IACF;IACA,IAAIR,YAAY,CAACS,UAAU,CAACb,IAAI,GAAG,GAAG,CAAC,EAAE;MACvCD,GAAG,CAACQ,GAAG,CAACC,WAAW,CAACM,SAAS,CAACV,YAAY,CAAC;MAC3C,EAAED,OAAO;MAET,IAAIJ,GAAG,CAACgB,cAAc,EAAE;QACtBC,WAAW,CAACjB,GAAG,EAAEK,YAAY,CAAC;MAChC;IACF;EACF;EACA,OAAOD,OAAO;AAChB,CAAC;AAED,SAASa,WAAWA,CAACjB,GAAG,EAAEC,IAAI,EAAEiB,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC,EAAE;EAChD,IAAID,IAAI,CAACE,GAAG,CAACpB,GAAG,CAAC,EAAE;IACjB,MAAM,IAAIqB,KAAK,CAAC,6CAA6C,GAAGrB,GAAG,CAACsB,GAAG,GAAG,wBAAwB,CAAC;EACrG;EACA,MAAMC,MAAM,GAAGvB,GAAG,CAACwB,OAAO,CAAC,CAAC;EAC5B,MAAMC,OAAO,GAAGzB,GAAG,CAAC0B,uBAAuB,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,GAAG,GAAG,GAAGzB,IAAI;EACvEsB,MAAM,CAACf,GAAG,CAACC,WAAW,CAACM,SAAS,CAACU,OAAO,CAAC;EACzC,IAAIF,MAAM,CAACP,cAAc,EAAE;IACzBC,WAAW,CAACM,MAAM,EAAEE,OAAO,EAAEP,IAAI,CAAC;EACpC;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}